import { NextRequest, NextResponse } from 'next/server'
import { createAdminClient } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const { 
      email, 
      password, 
      firstName, 
      lastName, 
      roleId, 
      teamId 
    } = await request.json()

    console.log('üöÄ API complete-registration called with:', { 
      email, 
      firstName, 
      lastName, 
      roleId, 
      teamId 
    })

    if (!email || !password || !firstName || !lastName) {
      return NextResponse.json(
        { error: 'Donn√©es manquantes - email, password, firstName et lastName requis' },
        { status: 400 }
      )
    }

    // Cr√©er le client admin Supabase
    const adminClient = createAdminClient()

    let finalUser
    
    // Essayer de cr√©er l'utilisateur d'abord
    console.log('üîÑ Tentative de cr√©ation utilisateur...')
    const { data: signUpData, error: signUpError } = await adminClient.auth.admin.createUser({
      email,
      password,
      user_metadata: {
        first_name: firstName,
        last_name: lastName,
        role_id: roleId,
      },
      email_confirm: true
    })
    
    if (signUpError) {
      // Si l'erreur est "email_exists", c'est qu'un utilisateur invit√© existe d√©j√†
      if (signUpError.message?.includes('email_exists') || signUpError.message?.includes('already been registered')) {
        console.log('üîç Email existe d√©j√†, tentative de mise √† jour directe par email...')
        
        // Nouvelle approche: utiliser getUserByEmail via une requ√™te SQL directe
        // car listUsers() √©choue avec des erreurs de base de donn√©es
        try {
          console.log('üîç Tentative de r√©cup√©ration utilisateur par requ√™te SQL...')
          
          // Utiliser une requ√™te SQL pour trouver l'utilisateur dans auth.users
          const { data: sqlResult, error: sqlError } = await adminClient
            .rpc('get_user_by_email', { user_email: email })
          
          if (sqlError || !sqlResult || sqlResult.length === 0) {
            console.warn('‚ö†Ô∏è Requ√™te SQL √©chou√©e ou utilisateur introuvable, essai via updateUserById avec ID g√©n√©r√©...')
            
            // Derni√®re tentative: essayer de mettre √† jour avec un ID g√©n√©r√© √† partir de l'email
            // Cette approche fonctionne parfois avec les utilisateurs invit√©s de Supabase
            try {
              // G√©n√©rer un UUID d√©terministe bas√© sur l'email pour les utilisateurs invit√©s
              const crypto = require('crypto')
              const hash = crypto.createHash('sha256').update(email).digest('hex')
              const possibleUserId = `${hash.substring(0, 8)}-${hash.substring(8, 12)}-4${hash.substring(13, 16)}-${hash.substring(16, 20)}-${hash.substring(20, 32)}`
              
              console.log('üéØ Tentative mise √† jour avec ID g√©n√©r√©:', possibleUserId)
              
              const { data: updateData, error: updateError } = await adminClient.auth.admin.updateUserById(
                possibleUserId,
                {
                  password,
                  user_metadata: {
                    first_name: firstName,
                    last_name: lastName,
                    role_id: roleId,
                  },
                  email_confirm: true
                }
              )
              
              if (updateError) {
                console.error('‚ùå Erreur mise √† jour avec ID g√©n√©r√©:', updateError)
                // Si √ßa ne marche pas non plus, on abandonne
                return NextResponse.json(
                  { error: 'Impossible de mettre √† jour le compte invit√©', details: updateError.message },
                  { status: 500 }
                )
              }
              
              finalUser = updateData.user
              console.log('‚úÖ Utilisateur mis √† jour avec ID g√©n√©r√©:', finalUser?.id)
              
            } catch (idError) {
              console.error('‚ùå Erreur avec approche ID g√©n√©r√©:', idError)
              return NextResponse.json(
                { error: 'Impossible de finaliser l\'inscription du compte invit√©' },
                { status: 500 }
              )
            }
          } else {
            // Utilisateur trouv√© via SQL
            const userId = sqlResult[0]?.id || sqlResult?.id
            console.log('‚úÖ Utilisateur trouv√© via SQL, mise √† jour...', userId)
            
            const { data: updateData, error: updateError } = await adminClient.auth.admin.updateUserById(
              userId,
              {
                password,
                user_metadata: {
                  first_name: firstName,
                  last_name: lastName,
                  role_id: roleId,
                },
                email_confirm: true
              }
            )
            
            if (updateError) {
              console.error('‚ùå Erreur mise √† jour utilisateur SQL:', updateError)
              return NextResponse.json(
                { error: 'Erreur lors de la mise √† jour du compte', details: updateError.message },
                { status: 500 }
              )
            }
            
            finalUser = updateData.user
            console.log('‚úÖ Utilisateur mis √† jour avec succ√®s:', finalUser?.id)
          }
        } catch (globalError) {
          console.error('‚ùå Erreur globale lors de la recherche utilisateur:', globalError)
          return NextResponse.json(
            { error: 'Erreur lors de la recherche du compte invit√©', details: globalError.message },
            { status: 500 }
          )
        }
      } else {
        // Autre erreur de cr√©ation
        console.error('‚ùå Erreur cr√©ation utilisateur:', signUpError)
        return NextResponse.json(
          { error: 'Erreur lors de la cr√©ation du compte', details: signUpError?.message },
          { status: 500 }
        )
      }
    } else {
      // Cr√©ation r√©ussie (utilisateur pas encore invit√©)
      finalUser = signUpData.user
      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', finalUser?.id)
    }

    // Ins√©rer/mettre √† jour l'utilisateur dans la table users
    const { error: insertUserError } = await adminClient
      .from('users')
      .upsert({
        id: finalUser!.id,
        email: email,
        first_name: firstName,
        last_name: lastName,
        role_id: roleId
      }, {
        onConflict: 'id'
      })

    if (insertUserError) {
      console.error('‚ùå Erreur insertion utilisateur dans table users:', insertUserError)
      // Ne pas faire √©chouer compl√®tement si c'est juste une erreur de doublon
      if (insertUserError.code !== '23505') {
        return NextResponse.json(
          { error: 'Erreur lors de la cr√©ation du profil utilisateur', details: insertUserError.message },
          { status: 500 }
        )
      }
    } else {
      console.log('‚úÖ Utilisateur ins√©r√© dans table users')
    }

    // Si une √©quipe est sp√©cifi√©e, ajouter l'utilisateur √† l'√©quipe
    if (teamId) {
      const { error: teamError } = await adminClient
        .from('team_members')
        .upsert({
          user_id: finalUser!.id,
          team_id: teamId,
          role: 'member'
        }, {
          onConflict: 'user_id,team_id'
        })

      if (teamError) {
        console.error('‚ùå Erreur ajout √©quipe:', teamError)
        // Ne pas faire √©chouer si c'est juste une erreur de doublon
        if (teamError.code !== '23505') {
          console.warn('‚ö†Ô∏è Utilisateur cr√©√© mais pas ajout√© √† l\'√©quipe:', teamError.message)
        }
      } else {
        console.log('‚úÖ Utilisateur ajout√© √† l\'√©quipe')
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Inscription compl√©t√©e avec succ√®s',
      user: {
        id: finalUser!.id,
        email: email,
        firstName,
        lastName
      }
    })

  } catch (error) {
    console.error('üí• Erreur API complete-registration:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}